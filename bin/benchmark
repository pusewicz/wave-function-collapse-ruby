#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift File.expand_path("../lib", __dir__)

require "benchmark"
require "json"
require "wave_function_collapse"

WIDTH = 20
HEIGHT = 20

json = JSON.load_file!("assets/map.tsj")
tiles =
  json["wangsets"].last["wangtiles"].map do |tile|
    prob = json["tiles"]&.find { |t| t["id"] == tile["tileid"] }&.fetch("probability")
    WaveFunctionCollapse::Tile.new(
      tileid: tile["tileid"],
      wangid: tile["wangid"],
      probability: prob
    )
  end
times = []

puts RUBY_DESCRIPTION unless ENV["CI"]

times = 10.times.map { |i|
  time = Benchmark.realtime {
    model = WaveFunctionCollapse::Model.new(tiles, WIDTH, HEIGHT)
    print "Run ##{i + 1}: Benchmark for Model(grid=#{model.width}x#{model.height} entropy=#{model.max_entropy})â€¦ " unless ENV["CI"]
    model.solve
    until model.complete?
      model.iterate
    end
  }
  puts "Finished in #{time.round(2)}s" unless ENV["CI"]
  time
}

average = times.sum / times.size
if ENV["CI"]
  puts JSON.dump([
    { name: "Average time", unit: "Seconds", value: average },
    { name: "Slowest time", unit: "Seconds", value: times.max },
    { name: "Fastest time", unit: "Seconds", value: times.min },
    { name: "P90", unit: "Seconds", value: times.sort[8] }
  ])
else
  puts "Average time: #{average}"
  puts "Slowest time: #{times.max}"
  puts "Fastest time: #{times.min}"
end
